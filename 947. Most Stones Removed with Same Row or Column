class Solution {
    HashMap<Integer, List<Integer>> adj = new HashMap<Integer, List<Integer>>();
    public int removeStones(int[][] stones) {
        
        Set<Integer> visited = new HashSet<Integer>();
        int count = 0;
        //Step 1: create adj
        for(int i = 0; i < stones.length; i++) {
            adj.put(i, new ArrayList<Integer>());
            for(int j = 0; j < stones.length; j++) {
                if(i == j) continue;
                if(stones[i][0] == stones[j][0] || stones[i][1]== stones[j][1]) {
                    adj.get(i).add(j);
                }
            }
        }
        System.out.println(adj);
        for(int i = 0; i < stones.length; i++) {
            if(!visited.contains(i))  {
                count++;
                dfs(stones, visited, i);
            }
        }
        return stones.length - count;
        
    }
    public void dfs(int[][] stones,Set<Integer> visited, int i){
        visited.add(i);
        List<Integer> next = adj.get(i);
        for(int each: next) {
            if(visited.contains(each)) continue;
            dfs(stones, visited, each);
        }
        
    }
    
}
